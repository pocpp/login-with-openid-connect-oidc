#!/bin/bash

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Utility functions
print_info() {
    if [ "$QUIET_MODE" != "true" ]; then
        printf "\033[0;32m[INFO]\033[0m %s\n" "$1"
    fi
}

print_warning() {
    printf "\033[1;33m[WARNING]\033[0m %s\n" "$1"
}

print_error() {
    printf "\033[0;31m[ERROR]\033[0m %s\n" "$1"
}

print_command() {
    if [ "$QUIET_MODE" != "true" ]; then
        printf "\033[1;33m[COMMAND]\033[0m %s\n" "$1"
    fi
}

# Display help message
show_help() {
    cat << EOF
Usage: $0 [OPTIONS]

This script creates an Azure AD application with federated credentials for GitHub Actions.

OPTIONS:
    -h, --help                          Show this help message and exit
    -d, --display-name <name>           Display name for the Azure AD application
                                       (default: \$USER-timestamp)
    -u, --github-username <username>    GitHub username
                                       (default: auto-detected from git remote)
    -r, --github-repo <repo>            GitHub repository name
                                       (default: auto-detected from git remote)
    -b, --branch <branch>               Git branch name (default: main)
                                       Note: ignored when --all is specified
    -a, --all                           Allow access from all branches using wildcard pattern
                                       (default: specific branch only)
    -g, --resource-group <name>         Azure resource group name. If specified, the Contributor
                                       role will be assigned at the resource group scope instead
                                       of subscription scope
    -q, --quiet                         Suppress info messages (errors and warnings still shown)

DESCRIPTION:
    This script performs the following operations:
    1. Logs into Azure CLI
    2. Creates an Azure AD application
    3. Creates a federated credential for GitHub Actions
    4. Creates a service principal
    5. Assigns Contributor role to the service principal
    6. Displays the required GitHub secrets

EXAMPLES:
    $0                                                    # Use all default values
    $0 --display-name my-app                             # Custom display name, other defaults
    $0 --all --display-name my-app                       # Allow access from all branches
    $0 --resource-group my-rg --display-name my-app     # With resource group scope
    $0 -a -g my-rg -d my-app -u myuser -r myrepo        # All branches with custom values
    $0 -g my-rg -d my-app -u myuser -r myrepo -b main   # Specific branch with custom values
    $0 --help                                            # Show this help

REQUIREMENTS:
    - Azure CLI must be installed and available in PATH
    - jq must be installed for JSON processing
    - Git repository with remote origin configured
    - Appropriate Azure permissions to create AD applications

OUTPUT:
    The script creates the following files:
    - app_creation_output.json: Azure AD application details
    - policy.json: Federated credential policy

    GitHub Secrets to configure:
    - AZURE_CLIENT_ID
    - AZURE_TENANT_ID
    - AZURE_SUBSCRIPTION_ID

EOF
}

# Initialize and validate parameters
initialize_parameters() {
    local suffix=$(date +%Y%m%d%H%M%S)
    local git_url=$(git remote get-url origin)
    local git_path=$(echo "$git_url" | sed -E 's#(.*github.com[:/])##')

    # Initialize variables with default values
    DISPLAY_NAME="$USER-$suffix"
    GITHUB_USERNAME=$(basename "$(dirname "$git_path")")
    GITHUB_REPO=$(basename "$git_path" .git)
    BRANCH_NAME="main"
    AZURE_RESOURCE_GROUP=""
    USE_ALL_BRANCHES=false
    QUIET_MODE=false

    # Parse all options
    while [[ $# -gt 0 ]]; do
        case $1 in
            -d|--display-name)
                DISPLAY_NAME="$2"
                shift 2
                ;;
            -u|--github-username)
                GITHUB_USERNAME="$2"
                shift 2
                ;;
            -r|--github-repo)
                GITHUB_REPO="$2"
                shift 2
                ;;
            -b|--branch)
                BRANCH_NAME="$2"
                shift 2
                ;;
            -a|--all)
                USE_ALL_BRANCHES=true
                shift
                ;;
            -g|--resource-group)
                AZURE_RESOURCE_GROUP="$2"
                shift 2
                ;;
            -q|--quiet)
                QUIET_MODE=true
                shift
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            -*)
                print_error "Unknown option: $1"
                show_help
                exit 1
                ;;
            *)
                print_error "Unexpected argument: $1"
                print_error "All parameters must be specified as options. Use --help for usage information."
                exit 1
                ;;
        esac
    done

    # Validate required parameters
    if [ -z "$DISPLAY_NAME" ] || [ -z "$GITHUB_USERNAME" ] || [ -z "$GITHUB_REPO" ] || [ -z "$BRANCH_NAME" ]; then
        print_error "Failed to initialize required parameters. Please check your git remote configuration."
        exit 1
    fi

    print_info "Parameters initialized:"
    print_info "  Display Name: $DISPLAY_NAME"
    print_info "  GitHub Username: $GITHUB_USERNAME"
    print_info "  GitHub Repository: $GITHUB_REPO"
    if [ "$USE_ALL_BRANCHES" = "true" ]; then
        print_info "  Branch Access: All branches (wildcard)"
        if [ "$BRANCH_NAME" != "main" ]; then
            print_warning "  Branch option '$BRANCH_NAME' is ignored when --all is specified"
        fi
    else
        print_info "  Branch Name: $BRANCH_NAME"
    fi
    if [ -n "$AZURE_RESOURCE_GROUP" ]; then
        print_info "  Azure Resource Group: $AZURE_RESOURCE_GROUP"
    fi
}

# Azure login
azure_login() {
    print_info "Logging into Azure..."
    print_command "az login"
    az login
    if [ $? -ne 0 ]; then
        print_error "Failed to login to Azure."
        exit 1
    fi
    print_info "Azure login successful."
}

# Create Azure AD application
create_azure_ad_app() {
    print_info "Creating Azure AD application '$DISPLAY_NAME'..."
    print_command "az ad app create --display-name \"$DISPLAY_NAME\""
    az ad app create --display-name "$DISPLAY_NAME" > ./app_creation_output.json

    if [ $? -ne 0 ]; then
        print_error "Failed to create Azure AD application."
        exit 1
    fi

    # Extract and set APPLICATION_ID immediately
    APPLICATION_ID=$(jq -r '.appId' ./app_creation_output.json)
    if [ -z "$APPLICATION_ID" ] || [ "$APPLICATION_ID" = "null" ]; then
        print_error "Failed to retrieve application ID from created application."
        exit 1
    fi

    print_info "Azure AD application '$DISPLAY_NAME' created successfully."
    print_info "Application ID: $APPLICATION_ID"
}

# Create policy file for federated credential
create_policy_file() {
    print_info "Creating policy file for federated credential..."
    cat > policy.json <<EOF
{
  "name": "MyFederatedCredential",
  "issuer": "https://token.actions.githubusercontent.com",
  "subject": "repo:$GITHUB_USERNAME/$GITHUB_REPO:ref:refs/heads/$BRANCH_NAME",
  "audiences": [
    "api://AzureADTokenExchange"
  ]
}
EOF
    print_info "Policy file created successfully."
}

# Create federated credential for all branches using Microsoft Graph API
# Reference: https://learn.microsoft.com/entra/workload-id/workload-identities-flexible-federated-identity-credentials?tabs=github#azure-cli-azure-powershell-and-terraform-providers
create_all_branches_federated_credential() {
    print_info "Creating federated credential for all branches (wildcard)..."

    # Validate APPLICATION_ID is available
    validate_application_id

    local object_id=$(jq -r '.id' ./app_creation_output.json)
    if [ -z "$object_id" ] || [ "$object_id" = "null" ]; then
        print_error "Failed to retrieve application registration object ID."
        exit 1
    fi

    OBJECT_ID="$object_id"

    # Create federated credential using Microsoft Graph API with wildcard pattern
    print_command "az rest --method post --url \"https://graph.microsoft.com/beta/applications/$OBJECT_ID/federatedIdentityCredentials\" --body \"...\""
    az rest --method post \
        --url "https://graph.microsoft.com/beta/applications/$OBJECT_ID/federatedIdentityCredentials" \
        --body "{
            \"name\": \"MyFederatedCredential\",
            \"issuer\": \"https://token.actions.githubusercontent.com\",
            \"audiences\": [\"api://AzureADTokenExchange\"],
            \"claimsMatchingExpression\": {
                \"value\": \"claims['sub'] matches 'repo:$GITHUB_USERNAME/$GITHUB_REPO:ref:refs/heads/*' and claims['job_workflow_ref'] matches '$GITHUB_USERNAME/$GITHUB_REPO/.github/workflows/*.yml@refs/heads/*'\",
                \"languageVersion\": 1
            }
        }"

    if [ $? -ne 0 ]; then
        print_error "Failed to create federated credential with wildcard pattern."
        exit 1
    fi

    print_info "Federated credential for all branches created successfully."

}

# Create federated credential
create_federated_credential() {
    print_info "Creating federated credential..."

    # Validate APPLICATION_ID is available
    validate_application_id

    print_command "az ad app federated-credential create --id \"$APPLICATION_ID\" --parameters @policy.json"
    az ad app federated-credential create \
        --id "$APPLICATION_ID" \
        --parameters @policy.json

    if [ $? -ne 0 ]; then
        print_error "Failed to create federated credential."
        exit 1
    fi

    print_info "Federated credential created successfully."

    # List federated credentials for verification
    print_command "az ad app federated-credential list --id \"$APPLICATION_ID\""
    az ad app federated-credential list --id "$APPLICATION_ID"
    if [ $? -ne 0 ]; then
        print_error "Failed to list federated credentials."
        exit 1
    fi
}

# Create service principal
create_service_principal() {
    print_info "Creating service principal..."

    # Validate APPLICATION_ID is available
    validate_application_id

    print_command "az ad sp create --id \"$APPLICATION_ID\""
    az ad sp create --id "$APPLICATION_ID"
    if [ $? -ne 0 ]; then
        print_error "Failed to create service principal for the application."
        exit 1
    fi

    print_info "Service principal created successfully."

    # Show service principal details for verification
    print_command "az ad sp show --id \"$APPLICATION_ID\""
    az ad sp show --id "$APPLICATION_ID"
    if [ $? -ne 0 ]; then
        print_error "Failed to show service principal details."
        exit 1
    fi
}

# Assign contributor role to service principal
assign_contributor_role() {
    print_info "Assigning Contributor role to service principal..."

    # Validate APPLICATION_ID is available
    validate_application_id

    local subscription_id=$(az account show --query id -o tsv)
    local scope

    # Determine scope based on resource group option
    if [ -n "$AZURE_RESOURCE_GROUP" ]; then
        scope="/subscriptions/$subscription_id/resourceGroups/$AZURE_RESOURCE_GROUP"
        print_info "Using resource group scope: $scope"
    else
        scope="/subscriptions/$subscription_id"
        print_info "Using subscription scope: $scope"
    fi

    print_command "az role assignment create --assignee \"$APPLICATION_ID\" --role \"Contributor\" --scope \"$scope\""
    az role assignment create \
        --assignee "$APPLICATION_ID" \
        --role "Contributor" \
        --scope "$scope"

    if [ $? -ne 0 ]; then
        print_error "Failed to assign Contributor role to the service principal."
        exit 1
    fi

    print_info "Contributor role assigned successfully."

    # List role assignments for verification
    print_command "az role assignment list --assignee \"$APPLICATION_ID\""
    az role assignment list --assignee "$APPLICATION_ID"
    if [ $? -ne 0 ]; then
        print_error "Failed to list role assignments for the service principal."
        exit 1
    fi
}

# Validate APPLICATION_ID is set and valid
validate_application_id() {
    if [ -z "$APPLICATION_ID" ] || [ "$APPLICATION_ID" = "null" ]; then
        print_error "APPLICATION_ID is not set. Cannot proceed."
        exit 1
    fi
}

# Display final summary and GitHub secrets
display_summary() {
    print_command "az account show --query tenantId -o tsv"
    local tenant_id=$(az account show --query tenantId -o tsv)
    print_command "az account show --query id -o tsv"
    local subscription_id=$(az account show --query id -o tsv)

    print_info "Application registration and federated credential setup completed successfully."
    print_info "You can find the application registration details in ./app_creation_output.json"
    print_info "You can find the federated credential policy in ./policy.json"
    print_info ""
    print_info "To use this in your GitHub Actions workflow, add the following secrets to your repository:"
    print_info "-------------------------------------------------------------"
    print_info "AZURE_CLIENT_ID: $APPLICATION_ID"
    print_info "AZURE_TENANT_ID: $tenant_id"
    print_info "AZURE_SUBSCRIPTION_ID: $subscription_id"
    print_info "-------------------------------------------------------------"
}

# Main execution flow
main() {
    initialize_parameters "$@"
    azure_login
    create_azure_ad_app
    
    # Choose federated credential creation method based on --all option
    if [ "$USE_ALL_BRANCHES" = "true" ]; then
        create_all_branches_federated_credential
    else
        create_policy_file
        create_federated_credential
    fi
    
    create_service_principal
    assign_contributor_role
    display_summary
}

# Execute main function with all arguments
main "$@"
